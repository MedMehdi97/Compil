@startuml
skinparam class {
BackgroundColor AliceBlue
ArrowColor DarkTurquoise
BorderColor Turquoise
}

skinparam stereotypeCBackgroundColor DarkTurquoise
skinparam stereotypeIBackgroundColor Magenta
skinparam stereotypeABackgroundColor Yellow

hide stereotype
hide empty member

abstract class AnalyseException

AnalyseException -up-|> RuntimeException

AnalyseLexicaleException -up-|> AnalyseException
AnalyseSyntaxiqueException -up-|> AnalyseException
AnalyseSemantiqueException -up-|> AnalyseException
DoubleDeclarationException -up-|> AnalyseSemantiqueException
VariableNonDeclareeException -up-|> AnalyseSemantiqueException

abstract class ArbreAbstrait {
   int noLigne
   protected ArbreAbstrait(int n)
   void verifier()
   String toMIPS()
}

class BlocDInstructions {
   BlocDInstructions(int n)
   void verifier()
   String toMIPS()
}

BlocDInstructions -up-|> ArbreAbstrait
BlocDInstructions -up- "*" ArbreAbstrait

abstract class Instruction {
   protected Instruction(int n)
}

Instruction -up-|> ArbreAbstrait
class Declarer {
   Declarer(int n, String nom, EntreeVariable e)
   void verifier()
   String toMIPS()
}
Declarer  -up-|> Instruction

class Ecrire {
   Ecrire(Expression e, int n)
   void verifier()
   String toMIPS()
}

Ecrire  -up-|> Instruction
class Lire {
   Lire(int n, Idf idf)
   void verifier()
   String toMIPS()
}

Lire  -up-|> Instruction
Lire - "1" Idf
class Affectation {
   Lire(int n, Idf idf, Expression e)
   void verifier()
   String toMIPS()
}

Affectation  -up-|> Instruction
Affectation - "1" Idf
Affectation - "1" Expression

abstract class Expression {
   protected Expression expG
   protected Expression expD
   protected String oper
   protected Expression(int n)
   public Expression(int n, Expression expG, Expression expD, String oper)
}

Expression  -up-|> ArbreAbstrait
Ecrire - "1" Expression

abstract class Constante {
   String cste
   protected Constante(String texte, int n)
   void verfier()
}

Constante  -up-|> Expression
Idf  -up-|> Expression

class ConstanteEntiere {
   ConstanteEntiere(String texte, int n)
   String toMIPS()
}

ConstanteEntiere  -up-|> Constante
class Idf {
   Idf(int n, String nom)
   void verifier()
   String toMIPS()
   int getDeplacement()
}

abstract class Entree {
   String nom
   int noLigne
}

abstract class Symbole {
   int getDeplacement()
}

class EntreeVariable {
   EntreeVariable(String n, int l)
}
EntreeVariable  -up-|> Entree

class SymboleVariable {
   int dep
   SymboleVariable(int dep)
}
SymboleVariable  -up-|> Symbole
class Tds << (S,#FF7700) Singleton >>{
int cptDepl
Tds()
Tds getInstance()
void ajouter(Entree e, Symbole s)
Symbole identifier(Entree e)
int getTailleZoneVariable()
}
Tds -up- "*" Entree
Tds -up- "*" Symbole
@enduml