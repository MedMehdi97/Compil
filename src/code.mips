.data
ln : 	.asciiz "\n"
vrai : 	.asciiz "vrai"
faux : 	.asciiz "faux"
ErreurDivisionParZero : 	.asciiz "ErreurDivisionParZero"

.text
main :

move $s7,$sp

#reservation de l'espace pour une variable
addi $sp, $sp, -4
#reservation de l'espace pour une variable
addi $sp, $sp, -4
#reservation de l'espace pour une variable
addi $sp, $sp, -4
#Declaration fonction
j fonctionjmp1
AB0:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s2, ($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, ($sp)
addi $sp, $sp, -4
move $s2, $sp
#Retour de la fonction
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
addi $sp,$sp, 8
lw $t8, 0($sp)
addi $sp,$sp, 4
lw $ra,($sp)
move $s2, $t8
sw $v0, ($sp)
addi $sp,$sp, -4
jr $ra
fonctionjmp1:
#Declaration fonction
j fonctionjmp2
AB2:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s2, ($sp)
addi $sp, $sp, -4
li $v0, 2
sw $v0, ($sp)
addi $sp, $sp, -4
move $s2, $sp
lw $v0, 20($sp)
sw $v0, 0($s2)
addi $sp, $sp, -4
lw $v0, 20($sp)
sw $v0, -4($s2)
addi $sp, $sp, -4
#Retour de la fonction
lw $v0, -4($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 0($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
addi $sp,$sp, 16
lw $t8, 0($sp)
addi $sp,$sp, 4
lw $ra,($sp)
move $s2, $t8
sw $v0, ($sp)
addi $sp,$sp, -4
jr $ra
fonctionjmp2:
#Declaration fonction
j fonctionjmp3
AB3:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s2, ($sp)
addi $sp, $sp, -4
li $v0, 3
sw $v0, ($sp)
addi $sp, $sp, -4
move $s2, $sp
lw $v0, 24($sp)
sw $v0, 0($s2)
addi $sp, $sp, -4
lw $v0, 24($sp)
sw $v0, -4($s2)
addi $sp, $sp, -4
lw $v0, 24($sp)
sw $v0, -8($s2)
addi $sp, $sp, -4
#Retour de la fonction
lw $v0, -8($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, -4($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 0($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
#Appel de fonction 
jal AB0
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
addi $sp,$sp, 20
lw $t8, 0($sp)
addi $sp,$sp, 4
lw $ra,($sp)
move $s2, $t8
sw $v0, ($sp)
addi $sp,$sp, -4
jr $ra
fonctionjmp3:
#Affectation
li $v0, 5
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -8($s7)
#Affectation
#Appel de fonction 
li $v0, 2
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
jal AB2
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 8
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, 0($s7)

#Instruction Ecrire 
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall
#Affectation
#Appel de fonction 
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 0($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
jal AB2
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 8
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -4($s7)

#Instruction Ecrire 
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
lw $v0, -8($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall
#Affectation
#Appel de fonction 
li $v0, 3
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 2
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
jal AB3
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 12
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -8($s7)

#Instruction Ecrire 
lw $v0, -8($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall
#Affectation
#Appel de fonction 
jal AB0
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -4($s7)

#Instruction Ecrire 
lw $v0, -4($s7)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

end :

li $v0, 10
syscall 
