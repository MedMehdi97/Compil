package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.tds.*;
import yal.tds.entree.*;
import yal.tds.symbole.*;
import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, ENTIER, LIRE, EGALE, SI, ALORS, SINON, FINSI, TANTQUE, REPETER, FINTANTQUE, PAROUVRANTE, PARFERMANTE ;
terminal String    IDF, CSTENTIERE, OPERB, OPERLOGIQUEA, OPERET, OPEROU, PLUS, MOINS, OPEREGALE, OPERNEGALE, NON ;

/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, LDEC, CPRG;
non terminal ExpressionArithmetique EXP, EXP1, EXP2;
non terminal ExpressionLogique EXPLOG, EXPLOG1, EXPLOG2;
non terminal Instruction DECL_VAR, INST, DEC;


/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG    ::=     PROGRAMME  IDF  DEBUT  CPRG:li  FIN
                {: RESULT = li ; :}
                ;

CPRG   ::=     LDEC:ld LINST:li
               {: ((BlocDInstructions)ld).ajouter(li) ;
                   RESULT = ld ; :}
        |
               LINST:li
               {: RESULT =li; :}
               ;

LDEC   ::=     LDEC:li  DEC:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                DEC:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

DEC ::=          DECL_VAR:d POINTVIRGULE
                 {: RESULT = d; :}
                 ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
         |     ECRIRE EXPLOG:e POINTVIRGULE
               {: RESULT = new Ecrire(e, eleft + 1) ; :}
         |
                LIRE IDF:i POINTVIRGULE
                {:  Idf id=new Idf(ileft +1, i) ;
                    RESULT = new Lire(ileft + 1, id) ; :}
         |      IDF:i EGALE EXP:e POINTVIRGULE
                {:  Idf id=new Idf(ileft +1, i);
                    RESULT =new Affectation(ileft +1, id, e);:}
         |      SI EXPLOG:e ALORS LINST:li FINSI
                {: RESULT =new Condition(eleft+1, e, li); :}
         |      SI EXPLOG:e ALORS LINST:li SINON LINST:lis FINSI
                {: RESULT =new Condition(eleft+1, e, li, lis); :}
         |     TANTQUE EXPLOG:e REPETER LINST:li FINTANTQUE
               {: RESULT= new Boucle(eleft+1, e, li); :}
                ;

EXP    ::= EXP:g PLUS EXP1:d
               {: RESULT = new ExpressionArithmetique(gleft + 1, g, d, "+"); :}
         | EXP:g MOINS EXP1:d
                          {: RESULT = new ExpressionArithmetique(gleft + 1, g, d, "-"); :}
         | EXP1:e
               {: RESULT = e; :}
               ;
EXP1   ::= EXP1:g OPERB:o EXP2:d
               {: RESULT = new ExpressionArithmetique(gleft + 1, g, d, o); :}
         | EXP2:e
               {: RESULT =e; :}
               ;
EXP2   ::= PAROUVRANTE EXP:e PARFERMANTE
               {: RESULT =e; :}
         | MOINS EXP2:e
               {: RESULT = new ExpressionArithmetiqueNegative(eleft+1, e); :}
         | CSTENTIERE:c
               {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
         | IDF:i
               {: RESULT = new Idf(ileft + 1, i) ; :}
               ;

EXPLOG ::= EXPLOG:g OPERET:o EXPLOG1:d
               {: RESULT = new ExpressionLogique(gleft+1, g, d, o); :}
         |  EXPLOG:g OPEROU:o EXPLOG1:d
               {: RESULT = new ExpressionLogique(gleft+1, g, d, o); :}
         |  NON EXPLOG1:e
            {: RESULT =new ExpressionLogiqueNon(eleft+1, e); :}
         |  EXPLOG1:e
            {: RESULT = e; :}
            ;
EXPLOG1 ::= PAROUVRANTE EXPLOG:e PARFERMANTE
                {: RESULT = e; :}
          | EXPLOG2:e
                {: RESULT=e; :}
                ;
EXPLOG2 ::= EXP:g OPERLOGIQUEA:o EXP:d
            {: RESULT = new ExpressionLogique(gleft+1, g, d, o); :}
          |
            EXP:g OPEREGALE:o EXP:d
            {: RESULT = new ExpressionLogique(gleft+1, g, d, "=="); :}
          |
             EXP:g OPERNEGALE:o EXP:d
             {: RESULT = new ExpressionLogique(gleft+1, g, d, "!="); :}
            ;

DECL_VAR ::=    ENTIER IDF:i
                {: EntreeVariable e = new EntreeVariable(i, ileft + 1);
                   Tds.getInstance().ajouter(e, new SymboleVariable(Tds.getInstance().getTailleZoneVariable()));
                   RESULT = new Declarer(ileft + 1, i, e);
                :}
                ;