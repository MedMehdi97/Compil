*****************Package exceptions*************************
@startuml
skinparam class {
BackgroundColor AliceBlue
ArrowColor DarkTurquoise
BorderColor Turquoise
}

skinparam stereotypeCBackgroundColor DarkTurquoise
skinparam stereotypeIBackgroundColor Magenta
skinparam stereotypeABackgroundColor Yellow

hide stereotype
hide empty member

package exceptions {

abstract class AnalyseException

AnalyseException -up-|> RuntimeException

AnalyseLexicaleException -up-|> AnalyseException
AnalyseSyntaxiqueException -up-|> AnalyseException
AnalyseSemantiqueException -up-|> AnalyseException
DoubleDeclarationException -up-|> AnalyseSemantiqueException
VariableNonDeclareeException -up-|> AnalyseSemantiqueException
DivisionParZeroException -up-|> AnalyseSemantiqueException
FonctionNonDeclareeException -up-> AnalyseSemantiqueException
RetourneException -up-> AnalyseSemantiqueException
FonctionRecursiveException -up-> AnalyseSemantiqueException

}
@enduml

*****************Package arbre*************************

@startuml
skinparam class {
BackgroundColor AliceBlue
ArrowColor DarkTurquoise
BorderColor Turquoise
}

skinparam stereotypeCBackgroundColor DarkTurquoise
skinparam stereotypeIBackgroundColor Magenta
skinparam stereotypeABackgroundColor Yellow

hide stereotype
hide empty member

package arbre {
abstract class ArbreAbstrait {
   int noLigne
   protected ArbreAbstrait(int n)
   void verifier()
   String toMIPS()
}

class BlocDInstructions {
   BlocDInstructions(int n)
   void verifier()
   String toMIPS()
}

BlocDInstructions -up-|> ArbreAbstrait
BlocDInstructions -up- "*" ArbreAbstrait

abstract class Instruction {
   protected Instruction(int n)
}

Instruction -up-|> ArbreAbstrait
class Declarer {
   Declarer(int n, String nom, EntreeVariable e)
   void verifier()
   String toMIPS()
}
Declarer  -up-|> Instruction

class Ecrire {
   Ecrire(int n)
   void verifier()
   String toMIPS()
}

Ecrire  -up-|> Instruction

class Lire {
   Lire(int n, Idf idf)
   void verifier()
   String toMIPS()
}

Lire  -up-|> Instruction
Lire - "1" Idf

class Affectation {
   Affectation(int n, Idf idf, Expression e)
   void verifier()
   String toMIPS()
}

Affectation  -up-|> Instruction
Affectation - "1" Idf
Affectation - "1" Expression

class Boucle {
   Boucle(int n,ExpressionLogique exp, ArbreAbstrait listInst)
   void verifier()
   String toMIPS()
}
Boucle  -up-|> Instruction
Boucle -up- "*" Instruction

class Condition {
   Boucle(int n,ExpressionLogique exp, ArbreAbstrait BlocAlors, ArbreAbstrait BlocSinon)
   Boucle(int n,ExpressionLogique exp, ArbreAbstrait BlocAlors)
   void verifier()
   String toMIPS()
}
Condition  -up-|> Instruction
Condition -up- "*" Instruction

abstract class Expression {
   protected Expression expD;
   protected Expression expG;
   protected String oper;
   protected Expression(int n)
}

Expression  -up-|> ArbreAbstrait
Ecrire - "1" Expression

class ExpressionArithmetique {
   public ExpressionArithmetique(int n, Expression expG, Expression expD, String oper)
   void verfier()
   String toMIPS()
}
ExpressionArithmetique  -up-|> Expression

class ExpressionArithmetiqueNegative {
   protected Expression(int n, Expression e)
   void verfier()
   String toMIPS()
}
ExpressionArithmetiqueNegative  -up-|> ExpressionArithmetique
ExpressionArithmetiqueNegative - "1" ExpressionArithmetique

class ExpressionLogique {
   public ExpressionLogique(int n, Expression expG, Expression expD, String oper)
   void verfier()
   String toMIPS()
}

ExpressionLogique  -up-|> Expression

class ExpressionLogiqueNon {
   public ExpressionLogiqueNon(Expression exp)
   void verfier()
   String toMIPS()
}
ExpressionLogiqueNon  -up-|> ExpressionLogique
ExpressionLogiqueNon - "1" ExpressionLogique

class Idf {
   Idf(int n, String nom)
   void verifier()
   String toMIPS()
   int getDeplacement()
}
Idf  -up-|> ExpressionArithmetique

abstract class Constante {
   String cste
   protected Constante(String texte, int n)
   void verfier()
}

Constante  -up-|> ExpressionArithmetique

class ConstanteEntiere {
   ConstanteEntiere(String texte, int n)
   String toMIPS()
}

ConstanteEntiere  -up-|> Constante

class AppelFonction {
  String nom
  AppelFonction(int n, String nom)
  void verifier()
  String toMips()
}

AppelFonction -up-|> ExpressionArithmetique
class DeclarerFonction {
   protected String nom
   protected int numBloc
   DeclarerFonction(int n, String nom, ArbreAbstrait listeInstructions)
   void verifier()
   String toMips()
}
DeclarerFonction -up-|> Instruction
DeclarerFonction -up- "*" Instruction

class Retourne {
 protected ExpressionArithmetique exp;
 Retourne(int n, ExpressionArithmetique exp)
 void verifier()
  String toMips()
}
Retourne -up-|> Instruction
}
@enduml

***************** Package tds ******************************
@startuml
skinparam class {
BackgroundColor AliceBlue
ArrowColor DarkTurquoise
BorderColor Turquoise
}

skinparam stereotypeCBackgroundColor DarkTurquoise
skinparam stereotypeIBackgroundColor Magenta
skinparam stereotypeABackgroundColor Yellow

hide stereotype
hide empty member

package tds {
abstract class Entree {
   String nom
   int noLigne
   int getLigne()
   int getNom()
   int entreeType()
}

abstract class Symbole {
   int getDeplacement()
   int getNumBloc()
}

class EntreeVariable {
   EntreeVariable(String n, int l)
}
EntreeVariable  -up-|> Entree

class SymboleVariable {
   int dep
   SymboleVariable(int dep)
}
SymboleVariable  -up-|> Symbole

class EntreeFonction {
   EntreeFonction(String n, int l)
}
EntreeFonction  -up-|> Entree

class SymboleFonction {
   int numBloc
   SymboleVariable(int numBloc)
}
SymboleFonction  -up-|> Symbole

class Tds << (S,#FF7700) Singleton >>{
int cptDepl
Tds()
Tds getInstance()
void ajouter(Entree e, Symbole s)
Symbole identifier(Entree e)
void entreeBloc()
void entreeBloc(int numBloc)
void sortieBloc()
void ajouterMain(Entree e, Symbole s)
void identifierMain(Entree e)
void ajouterException(AnalyseSemantiqueException e)
void declencherException()
int getTailleZoneVariable()
}
Tds -up- "*" TableLocal

class TableLocal {
int numBloc
int cptDepl
int nbRetour
TableLocal(int n, TableLocal tablePere)
void ajouter(Entree e, Symbole s)
Symbole identifier(Entree e)
void AjouterFils(TableLocal fils)

}
TableLocal -up- "*" Entree
TableLocal -up- "*" Symbole
TableLocal -up- "*" TableLocal
}
@enduml