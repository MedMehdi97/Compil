.data
ln : 	.asciiz "\n"
vrai : 	.asciiz "vrai"
faux : 	.asciiz "faux"
ErreurDivisionParZero : 	.asciiz "ErreurDivisionParZero"

.text
main :

move $s7,$sp

#Declaration fonction
j fonctionjmp1
fib_rec1:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s2, ($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, ($sp)
addi $sp, $sp, -4
move $s2, $sp
lw $v0, 16($sp)
sw $v0, 0($sp)
addi $sp, $sp, -4

#Condition Si
lw $v0, 0($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
bne $v0, $t8, condf1
li $v0, 1
b fincond1

condf1: 
li $v0, 0

fincond1: 

sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 0($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
bne $v0, $t8, condf2
li $v0, 1
b fincond2

condf2: 
li $v0, 0

fincond2: 

sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
or $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
beqz $v0, sinon1
#Retour de la fonction
lw $v0, 0($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
addi $sp,$sp, 12
lw $t8, 0($sp)
addi $sp,$sp, 4
lw $ra,($sp)
move $s2, $t8
sw $v0, ($sp)
addi $sp,$sp, -4
jr $ra
b finSi1

sinon1: 

finSi1:

#Retour de la fonction
#Appel de fonction 
lw $v0, 0($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
sub $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
#Appel de fonction 
lw $v0, 0($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 2
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
sub $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
addi $sp,$sp, 12
lw $t8, 0($sp)
addi $sp,$sp, 4
lw $ra,($sp)
move $s2, $t8
sw $v0, ($sp)
addi $sp,$sp, -4
jr $ra
fonctionjmp1:
#Declaration fonction
j fonctionjmp2
fib_itr1:
sw $ra, ($sp)
addi $sp, $sp, -4
sw $s2, ($sp)
addi $sp, $sp, -4
li $v0, 2
sw $v0, ($sp)
addi $sp, $sp, -4
move $s2, $sp
lw $v0, 16($sp)
sw $v0, 0($sp)
addi $sp, $sp, -4
#reservation de l'espace pour une variable
addi $sp, $sp, -4
#reservation de l'espace pour une variable
addi $sp, $sp, -4
#reservation de l'espace pour une variable
addi $sp, $sp, -4
#reservation de l'espace pour une variable
addi $sp, $sp, -4

#Condition Si
lw $v0, 0($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
bne $v0, $t8, condf3
li $v0, 1
b fincond3

condf3: 
li $v0, 0

fincond3: 

sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
beqz $v0, sinon2
#Retour de la fonction
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
addi $sp,$sp, 28
lw $t8, 0($sp)
addi $sp,$sp, 4
lw $ra,($sp)
move $s2, $t8
sw $v0, ($sp)
addi $sp,$sp, -4
jr $ra
b finSi2

sinon2: 

finSi2:

#Affectation
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -4($s2)
#Affectation
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -8($s2)
#Affectation
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -12($s2)
# Boucle Tant que 
tantque1:
lw $v0, -12($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, 0($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
bge $v0, $t8, condf4
li $v0, 1
b fincond4

condf4: 
li $v0, 0

fincond4: 

sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
beqz $v0, fintantque1
#Affectation
lw $v0, -4($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
lw $v0, -8($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -16($s2)
#Affectation
lw $v0, -8($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -4($s2)
#Affectation
lw $v0, -16($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -8($s2)
#Affectation
lw $v0, -12($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $t8, 0($sp)
addi $sp, $sp, 4
lw $v0, 0($sp)
add $v0, $v0, $t8
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
sw $v0, -12($s2)
b tantque1
fintantque1: 
#Retour de la fonction
lw $v0, -8($s2)
sw $v0, 0($sp)
addi $sp, $sp, -4
addi $sp,$sp, 4
lw $v0, 0($sp)
addi $sp,$sp, 28
lw $t8, 0($sp)
addi $sp,$sp, 4
lw $ra,($sp)
move $s2, $t8
sw $v0, ($sp)
addi $sp,$sp, -4
jr $ra
fonctionjmp2:

#Instruction Ecrire 
#Appel de fonction 
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_itr1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_itr1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 3
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_itr1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 5
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_itr1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 8
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_itr1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 10
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_itr1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 18
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_itr1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 23
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_itr1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 0
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 1
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 3
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 5
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 8
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 10
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 18
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

#Instruction Ecrire 
#Appel de fonction 
li $v0, 23
sw $v0, 0($sp)
addi $sp, $sp, -4
jal fib_rec1
addi $sp, $sp, 4
lw $v0, 0($sp)
addi $sp, $sp, 4
sw $v0, ($sp)
addi $sp,$sp, -4
addi $sp, $sp, 4
lw $v0, 0($sp)
move $a0, $v0
li $v0, 1
syscall

#Saut de ligne
li $v0, 4
la $a0, ln
syscall

end :

li $v0, 10
syscall 
